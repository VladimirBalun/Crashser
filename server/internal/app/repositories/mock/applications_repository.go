// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repositories/applications_repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApplicationsRepository is a mock of ApplicationsRepository interface.
type MockApplicationsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationsRepositoryMockRecorder
}

// MockApplicationsRepositoryMockRecorder is the mock recorder for MockApplicationsRepository.
type MockApplicationsRepositoryMockRecorder struct {
	mock *MockApplicationsRepository
}

// NewMockApplicationsRepository creates a new mock instance.
func NewMockApplicationsRepository(ctrl *gomock.Controller) *MockApplicationsRepository {
	mock := &MockApplicationsRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationsRepository) EXPECT() *MockApplicationsRepositoryMockRecorder {
	return m.recorder
}

// GetApplicationNames mocks base method.
func (m *MockApplicationsRepository) GetApplicationNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationNames indicates an expected call of GetApplicationNames.
func (mr *MockApplicationsRepositoryMockRecorder) GetApplicationNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationNames", reflect.TypeOf((*MockApplicationsRepository)(nil).GetApplicationNames))
}
